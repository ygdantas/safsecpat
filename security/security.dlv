% ======= SECURITY =========


% ***** THREAT CONDITION ******
% Alphabet for types of threat.
%    * con -> confidentiality
%    * int -> integrity
%    * ava -> availability
%    * aut -> authentication


%======= Saf2Sec: Faults to Assets =======
asset(IDSG,CP) :- sg(IDSG,[IDHZ | ATTRSSG]), 
                  hz(IDHZ,[CP | ATTRSHZ]) .

damageScenario(IDHZ,SECSEV) :- hz(IDHZ,_),
                               getHazardSev(IDHZ,SAFESEV),
                               severityMap(SAFESEV,SECSEV) .

threat2damageScenario(IDFL,IDHZ) :- 
   damageScenario(IDHZ,_),
   threat(IDFL,_),
   lmcs2hz(LMCS,IDHZ),
   mcs(IDMCS,LFAILS),
   #member(IDMCS,LMCS),
   #member(IDFL,LFAILS) .

% =======Saf2Sec: Failures to Potential Threas=======
pThreat(IDFL,[TARGET,HWTARGET,SECTYPE,SECSEV]) :- 
					          fl(IDFL,ATTRSFL),
					          ft2fl(IDFT,IDFL),
							  getFaultCP(IDFT,TARGET),
							  dep(TARGET,HWTARGET),
					          getFailureType(IDFL,SAFTYPE),
					          typeMap(SAFTYPE,SECTYPE),
					          hz(IDHZ,ATTRSHZ),
					          mcs(IDMCS,FLISTFAIL),
					          #member(IDFL,FLISTFAIL),
					          lmcs2hz(LIDMCS,IDHZ),
					          #member(IDMCS,LIDMCS),
							  damageScenario(IDHZ,SECSEV).

pThreat(IDFL,[TARGET,HWTARGET,SECTYPE,SECSEV]) :- 
					          fl(IDFL,ATTRSFL),
					          ft2fl(IDFT,IDFL),
							  getFaultCP(IDFT,TARGET),
							  ch(TARGET,_,_),
							  can(HWTARGET),
							  dep(TARGET,LHWTARGET),
							  #member(HWTARGET,LHWTARGET),
					          getFailureType(IDFL,SAFTYPE),
					          typeMap(SAFTYPE,SECTYPE),
					          hz(IDHZ,ATTRSHZ),
					          mcs(IDMCS,FLISTFAIL),
					          #member(IDFL,FLISTFAIL),
					          lmcs2hz(LIDMCS,IDHZ),
					          #member(IDMCS,LIDMCS),
							  damageScenario(IDHZ,SECSEV).


% ======= Potential Threats to Threats  =======
%% A potential threat becomes a real threat if 
%% there is a potetial threat that can be reached
% Risk Assessment: Attack Path Analysis
threat([IDPT,PATH],[TARGET,HWTARGET,SECTYPE,SECSEV]) :- pThreat(IDPT,[TARGET,HWTARGET,SECTYPE,SECSEV]),
							               			  reachI(TARGET,HWTARGET,PATH).

% ======= Threat mitigation with patterns =======

nmit(IDTR) :- threat(IDTR,ATTRSTR),
			         not mit(IDTR) .

%% mit([IDTR,PATH]) :- threat(IDTR,ATTRSTR),
%% 			        getThreatTarget(IDTR,TARGET),
%% 			        getThreatType(IDTR,TYPE),
%% 			        xsecurityPattern(IDPAT,ATTRSPAT),
%% 			        getSecPatTarget(IDPAT,TARGET),
%% 			        getSecPatName(IDPAT,PAT),
%% 			        securityIntent(PAT,ATTRSINTENT),
%% 			        getSecIntentThreatType(PAT,PATTYPE),
%% 			        #member(TYPE,PATTYPE),
%% 			        getThreatPath(IDTR,PATH).

mitby(IDTR,TARGET,[IDPAT,firewall]) :- threat(IDTR,ATTRSTR),
							      xsecurityPattern(IDPAT,[firewall,[TRUSTEDNETHW,UNTRUSTEDNETHW,CHECKER],INPUTS,INTERNAL,OUTPUTS]),
							      securityIntent(firewall,ATTRSINTENT),
							      getThreatPath(IDTR,PATH),
							      #subList([TRUSTEDNETHW,UNTRUSTEDNETHW],PATH),
								  getThreatType(IDTR,TYPE),
								  getSecIntentThreatType(firewall,PATTYPE),	
								  #member(TYPE,PATTYPE),
								  getThreatTarget(IDTR,TARGET).

mitby(IDTR,TARGET,[IDPAT,securityMonitorApp]) :- threat(IDTR,ATTRSTR),
							      getThreatType(IDTR,TYPE),
							      xsecurityPattern(IDPAT,[securityMonitorApp,[TARGET | OTHERCPS],_,_,_]),
							      securityIntent(securityMonitorApp,ATTRSINTENT),
							      getSecIntentThreatType(securityMonitorApp,PATTYPE),
								  #member(TYPE,PATTYPE),							      
							      getSecPatTarget(IDPAT,TARGET).


% ======= Reachability rules: Attack Paths =======

readsFromCan(Cp,Can) :- 
		  ch(Id,Cp2,Cp),
		  dep(Id,Can),
		  can(Can) .

%% writesToCan(Cp,Can) denotes that the (physical)
%% component Cp writes to the Can bus
writesToCan(Cp,Can) :- 
		  ch(Id,Cp,Cp2),
		  dep(Id,Can),
		  can(Can) .


%reachI(CP,[CP]) :- public(CP) .
reachI(CP,HWCP,[HWCP]) :- public(HWCP), dep(CP,HWCP).
%reachAt(CP,HWCP,[HWCP]) :- public(CP), ch(CH,CP,X), dep(CH,HWCP).
%% Assumption1: The intruder does not need to reach a Can bus twice.
%% Assumption2: From a public component that is connected (somehow) to a Can bus, then the intruder can reach the can bus.

%% reachI(Can,[Can,X]) denotes that X can be reached via the Can bus, if X is public and there is a channel
%% from the Can bus to X
reachI(Ch,Can,[Can,HWCP]) :- 
	   ch(Ch,Y,X), %ch(celnav,cell,navig)
	   dep(Ch,Can),
	   dep(X,HWCP),
	   can(Can),
	   public(HWCP).

% Question: Does this rule make sense?
%% reachI(CP,[X]) denotes that CP can be reached via X, if X is public and there is a channel
%% from X to CP
reachI(CP,HWCP,[HWCP2]) :- 
	   ch(Ch,X,CP),
	   wireless(WL),
	   dep(Ch,WL), 
	   dep(CP,HWCP),
	   dep(X,HWCP2), 
	   public(HWCP2).



%% reachI(Can,[Can,X]) denotes that X can be reached via the Can bus, if X is public and there is a channel
%% from X to the the Can bus
reachI(Ch,Can,[Can,HWCP]) :- 
	   ch(Ch,X,Y),
	   dep(X,HWCP),
	   dep(Ch,Can),
	   can(Can),
	   %% reachI(X,L),
	   public(HWCP).
	  %% not #member(Can,L).

%% Assumption1: The intruder does not need to reach a Can bus twice when a component X
%% writes to the Can bus.
reachI(Ch,Can,[Can|L]) :- 
	  writesToCan(X,Can),
	  dep(Ch,Can),
	  dep(X,HWCP),
	  reachI(X,HWCP,L),
	  not #member(Can,L).


%% Assumption1: The intruder does not need to reach a Can bus twice when a component X
%% reads from the Can bus.
reachI(X,HWCP,[HWCP|L]) :- 
	  readsFromCan(X,Can),
	  dep(Ch,Can),
	  dep(X,HWCP),
	  reachI(Ch,Can,L).

%% reachI(CP,X) :-
%% 	  cp(X),
%% 	  cp(CP), 
%% 	  ch(CH,X,CP),
%% 	  can(CAN),
%% 	  not dep(CH,CAN),
%% 	  public(X) .


% ======= SECURITY BOUNDARY =======
%% bdCh(ID) -> Channel with id ID 
%              is a boundary
%% trusted parts and untrusted parts
%% Possible constraint to be added
%% :- bdCh(Id), not ch(ID,ICP,OCP) .

% X and Comm are in different boundaries if X sends messages
% through a CAN bus (Comm)
bdCh(X,Comm) :- ch(Id,X,_),
				dep(Id,Comm),
				can(Comm) .

bdCh(HWCP,Comm) :- ch(Id,X,_),
				   dep(X,HWCP),
				   dep(Id,Comm),
				   can(Comm) .

% Y and Comm are in different boundaries if Y receives messages
% through a CAN bus (Comm)
bdCh(Comm,Y) :- ch(Id,_,Y),
				dep(Id,Comm),
				can(Comm) .

bdCh(Comm,HWCP) :- ch(Id,_,Y),
			    dep(Y,HWCP),
				dep(Id,Comm),
				can(Comm) .


% ======= Security Patterns =======


% === Firewall ===
assumption(firewall,are_verified,[CHECKER]) :- 
  		   securityPattern(IDPAT,[firewall,[X,Y,CHECKER],_,_,_]).
assumption(firewall,have_policies,[CHECKER]) :- 
  		   securityPattern(IDPAT,[firewall,[X,Y,CHECKER],_,_,_]).	   

securityIntent(firewall,[[int,ava]]) .

securityPattern(IDPAT,[firewall,[X,Y,CHECKER],INPUTS,INTERNAL,INTERNAL]) :- 
   xsecurityPattern(IDPAT,[firewall,[X,Y,CHECKER],INPUTS,INTERNAL,OUTPUTS]).


% === Security Monitor Application ===
assumption(firewall,are_verified,[CHECKER]) :- 
	securityPattern(IDPAT,[securityMonitorApp,[TARGET,CHECKER],INPUTS,INTERNAL,OUTPUTS]).
assumption(firewall,have_policies,[CHECKER]) :- 
	securityPattern(IDPAT,[securityMonitorApp,[TARGET,CHECKER],INPUTS,INTERNAL,OUTPUTS]).	

securityIntent(securityMonitorApp,[[int]]) .

securityPattern(IDPAT,[securityMonitorApp,[TARGET,CHECKER],INPUTS,INTERNAL,OUTPUTS]) :- 
		xsecurityPattern(IDPAT,[securityMonitorApp,[TARGET,CHECKER],INPUTS,INTERNAL,OUTPUTS]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Exploration
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mit(IDTR) :- threat(IDTR,ATTRSTR),
			 getThreatPath(IDTR,PATH),
		     nuMitigated(IDTR,[IDPAT | ATTRSINTENT]).

nuMitigated(IDTR,[IDPAT | ATTRSINTENT]) :-
       xsecurityPattern(IDPAT,[firewall,[HWUNIT,COMM,CHECKER],INPUTS,INTERNAL,OUTPUTS]),
       securityIntent(firewall,ATTRSINTENT),
       threat(IDTR,ATTRSTR),
       getThreatPath(IDTR,PATH),
       #subList([HWUNIT,COMM],PATH).

nuMitigated(IDTR,[IDPAT | ATTRSINTENT]) :-
       xsecurityPattern(IDPAT,[firewall,[COMM,HWUNIT,CHECKER],INPUTS,INTERNAL,OUTPUTS]),
       securityIntent(firewall,ATTRSINTENT),
       threat(IDTR,ATTRSTR),
       getThreatPath(IDTR,PATH),
       #subList([COMM,HWUNIT],PATH).


xsecurityPattern([nuIDSECPAT,firewall,CTR],[firewall,[HWUNIT,COMM,[nuCHECKER,CTR]],[nuINPUTS,CTR],[nuINTERNAL,CTR],[nuOUTPUTS,CTR]])
v
xnsecurityPattern([nuIDSECPAT,firewall,CTR],[firewall,[HWUNIT,COMM,[nuCHECKER,CTR]],[nuINPUTS,CTR],[nuINTERNAL,CTR],[nuOUTPUTS,CTR]])
	:- threat(IDTR,ATTRSTR),
	   getThreatType(IDTR,TYPE),
	   getThreatTarget(IDTR,TARGET),
	   getThreatPath(IDTR,PATH),
	   can(COMM),
	   hw(HWUNIT),
	   #subList([HWUNIT,COMM],PATH),
	   counterSecPat(CTR),
	   securityIntent(firewall,ATTRSINTENT),
	   getSecIntentThreatType(firewall,TRTYPE),
	   #member(TYPE,TRTYPE),
	   exploreSecPat(firewall).

xsecurityPattern([nuIDSECPAT,firewall,CTR],[firewall,[COMM,HWUNIT,[nuCHECKER,CTR]],[nuINPUTS,CTR],[nuINTERNAL,CTR],[nuOUTPUTS,CTR]])
v
xnsecurityPattern([nuIDSECPAT,firewall,CTR],[firewall,[COMM,HWUNIT,[nuCHECKER,CTR]],[nuINPUTS,CTR],[nuINTERNAL,CTR],[nuOUTPUTS,CTR]])
	:- threat(IDTR,ATTRSTR),
	   getThreatType(IDTR,TYPE),
	   getThreatTarget(IDTR,TARGET),
	   getThreatPath(IDTR,PATH),
	   can(COMM),
	   hw(HWUNIT),
	   #subList([COMM,HWUNIT],PATH),
	   counterSecPat(CTR),
	   securityIntent(firewall,ATTRSINTENT),
	   getSecIntentThreatType(firewall,TRTYPE),
	   #member(TYPE,TRTYPE),
	   exploreSecPat(firewall).


nuMitigated(IDTR,[IDPAT | ATTRSINTENT]) :-
       xsecurityPattern(IDPAT,[securityMonitorApp,[TARGET | OTHERCPS],INPUTS,INTERNAL,OUTPUTS]),
       securityIntent(PAT,ATTRSINTENT),
       threat(IDTR,ATTRSTR),
       getThreatTarget(IDTR,TARGET),
       getThreatType(IDTR,TYPE),
	   getSecIntentThreatType(securityMonitorApp,PATTYPE),
	   #member(TYPE,PATTYPE).

xsecurityPattern([nuIDSECPAT,securityMonitorApp,CTR],[securityMonitorApp,[TARGET,[nuCHECKER,CTR]],[nuINPUTS,CTR],[nuINTERNAL,CTR],[nuOUTPUTS,CTR]])
v
xnsecurityPattern([nuIDSECPAT,securityMonitorApp,CTR],[securityMonitorApp,[TARGET,[nuCHECKER,CTR]],[nuINPUTS,CTR],[nuINTERNAL,CTR],[nuOUTPUTS,CTR]])
	:- threat(IDTR,ATTRSTR),
	   getThreatType(IDTR,TYPE),
	   getThreatTarget(IDTR,TARGET),
	   securityIntent(securityMonitorApp,ATTRSINTENT),
	   getSecIntentThreatType(securityMonitorApp,PATTYPE),
	   #member(TYPE,PATTYPE),
	   counterSecPat(CTR),
	   exploreSecPat(securityMonitorApp).



#const numSecPatMin = 1.
#const numSecPatMax = 1. % TODO: Assign the number of failures to numFailureMax 
counterSecPat(numSecPatMin..numSecPatMax).


:- xsecurityPattern([nuIDSECPAT,firewall,CTR1],[firewall,[COMM1,HWUNIT1,[nuCHECKER,CTR1]],[nuINPUTS,CTR1],[nuINTERNAL,CTR1],[nuOUTPUTS,CTR1]]),
   xsecurityPattern([nuIDSECPAT,firewall,CTR2],[firewall,[COMM2,HWUNIT2,[nuCHECKER,CTR2]],[nuINPUTS,CTR2],[nuINTERNAL,CTR2],[nuOUTPUTS,CTR2]]),
   COMM1 != COMM2, CTR1 == CTR2 .

:- xsecurityPattern([nuIDSECPAT,firewall,CTR1],[firewall,[COMM1,HWUNIT1,[nuCHECKER,CTR1]],[nuINPUTS,CTR1],[nuINTERNAL,CTR1],[nuOUTPUTS,CTR1]]),
   xsecurityPattern([nuIDSECPAT,firewall,CTR2],[firewall,[COMM2,HWUNIT2,[nuCHECKER,CTR2]],[nuINPUTS,CTR2],[nuINTERNAL,CTR2],[nuOUTPUTS,CTR2]]),
   HWUNIT1 != HWUNIT2, CTR1 == CTR2 .

:- xsecurityPattern([nuIDSECPAT,firewall,CTR1],[firewall,[COMM1,HWUNIT1,[nuCHECKER,CTR1]],[nuINPUTS,CTR1],[nuINTERNAL,CTR1],[nuOUTPUTS,CTR1]]),
   xsecurityPattern([nuIDSECPAT,firewall,CTR2],[firewall,[COMM1,HWUNIT1,[nuCHECKER,CTR2]],[nuINPUTS,CTR2],[nuINTERNAL,CTR2],[nuOUTPUTS,CTR2]]),
   CTR1 != CTR2 .

:- xsecurityPattern([nuIDSECPAT,securityMonitorApp,CTR1],[securityMonitorApp,[TARGET,[nuCHECKER,CTR1]],[nuINPUTS,CTR1],[nuINTERNAL,CTR1],[nuOUTPUTS,CTR1]]),
   xsecurityPattern([nuIDSECPAT,securityMonitorApp,CTR2],[securityMonitorApp,[TARGET,[nuCHECKER,CTR2]],[nuINPUTS,CTR2],[nuINTERNAL,CTR2],[nuOUTPUTS,CTR2]]),
   CTR1 != CTR2 .

