%%% ./dlv examples/headlamp/architecture-headlamp-not-mit-sec-1.dlv  security/security.dlv utils/utils.dlv -nofinitecheck -filter=firewall -filter=nmit -filter=secMonCP -filter=secMonCH -filter=mitby

% === Architecture ===
% Components
%% cell -> Cellular
%% bt -> Bluetooth
%% navig -> Navigation ECU
%% gw -> Gateway ECU
%% obdConn -> OBd-II connector
%% cam -> Camera ECU
%% bodyCtrl -> Body Control ECU
%% pwrSwchAct -> Power Switch Actuator 
%% hdLmpSwch -> Headlamp Switch
%% hdLmpSystem -> Headlamp System
cp(cell). 
cp(bt).
cp(navig).
cp(gw). 
cp(obdConn).
cp(cam).
cp(bodyCtrl).
cp(pwrSwchAct).
cp(hdlmpSwch).
cp(hdlmpSystem).


% Subcomponents
%% hdLmpSwch is a subcomponent of hdlmpSystem
subcp(hdlmpSwch, hdlmpSystem).
%% bodyCtrl is a subcomponent of hdlmpSystem
subcp(bodyCtrl, hdlmpSystem).
%% cam is a subcomponent of hdlmpSystem
subcp(cam, hdlmpSystem).
%% pwrSwchAct is a subcomponent of hdlmpSystem
subcp(pwrSwchAct, hdlmpSystem).


% Logical Channels
%% cell -> navig 
ch(cellNavig, cell, navig).
%% bt -> navig
ch(btNavig,bt,navig).
%% navig -> gw
ch(navigGW,navig,gw).
%% gw -> pwrSwchAct
ch(gwPwrSwch,gw,pwrSwchAct).
%% cam, pwrSwchAct (deleted due to TMR)
ch(camPwrSwch,cam,pwrSwchAct).

ch(obdGw,obdConn,gw).

ch(bodyCPwrSwch, bodyCtrl, pwrSwchAct).

ch(gwbodyCtrl, gw, bodyCtrl).

ch(hdSwchbdCtrl,hdlmpSwch,bodyCtrl) .

ch(gwhlSys,gw,hdlmpSystem).
% physical components
  % - ECUs
  % - comm mediums
can(can1).
dep(navigGW,can1).
can(can2).
dep(gwPwrSwch,can2).
%dep(bodyCPwrSwch, can2).
dep(gwbodyCtrl, can2).
can(can3).
dep(obdGw,can3).

dep(gwhlSys,can2).


%% TODO: Create an ECU for gw,cam and bodyCtrl as, e.g., ecuNavig
ecu(ecuNavig).
ecu(ecuGW).
ecu(ecuBC).
ecu(ecuCAM).
dep(navig,ecuNavig).
dep(gw,ecuGW).
%dep(cam,ecuCAM).
%dep(bodyCtrl,ecuBC).


wireless(wl).
dep(cellNavig,wl).
dep(btNavig,wl).


hw(pwrSwchAct).
hw(cam) .


%%%% Identified hazards %%%%
hz([hzHLSys,hdlmpSystem,cat]).
fl([flBdCl,bodyCtrl,err,cat]) .
%fl([flCam,cam,err,cat]) .
fl([flcan,can2,err,cat]).
fl([flhls,hdlmpSystem,loss,cat]) .

fl2Hz(flhls,hzHLSys) .
fl2Hz(flBdCl,hzHLSys).
%fl2Hz(flCam,hzHLSys) .
fl2Hz(flCan,hzHLSys) .


tol([flcan,can2,err,cat]).
tolby([flcan,can2,err,cat],replacement).

%%% PATTERN - Safety Monitor
cp(safMon).
subcp(safMon,bodyCtrl).
ch(min1,hdlmpSwch,safMon).
ch(min2,gw,safMon).
dep(min2,can2).
ch(mout,bodyCtrl,safMon).
ch(fs,safMon,bodyCtrl).
safMon(safMon,bodyCtrl,[hdSwchbdCtrl,gwbodyCtrl],[bodyCPwrSwch],fs,[min1,min2],[mout]).


%%% PATTERN: TMR
%cp(redCam1).
%hw(redCam1).
%cp(redCam2).
%hw(redCam2).
%cp(voterTMR).
%ch(camVT,cam,voterTMR).
%ch(rdC1VT,redCam1,voterTMR).
%ch(rdC2VT,redCam2,voterTMR).
%ch(vtout,voterTMR,pwrSwchAct).
%tmr(tmr,cam,redCam1,redCam2,camVT,rdC1VT,rdC2VT,voterTMR,vtout,pwrSwchAct).


%%% Pattern - Watchdog
cp(watchdog).
ch(lvwd,hdlmpSystem,watchdog).
ch(sswd,watchdog,hdlmpSystem).
watchDog(watchdog,hdlmpSystem,sswd,lvwd).

%ch(camPwrSwch,cam,pwrSwchAct).


%%%% SECURITY %%%
%% public(CP), where CP is public component that may be accessible by an attacker
public(cell).
public(bt).
public(obdConn).



%% Information flow


if(if2,[cellNavig,navigGW,gwbodyCtrl]).
before(cellNavig,navigGW,if2).
before(navigGW,gwbodyCtrl,if2).


if(if4,[btNavig,navigGW,gwbodyCtrl]).  
before(btNavig,navigGW,if4).
before(navigGW,gwbodyCtrl,if4).


if(if6,[obdGw,gwbodyCtrl]).  
before(obdGw,gwbodyCtrl,if6).



if(if7,[hdSwchbdCtrl, bodyCPwrSwch]).
before(hdSwchbdCtrl,bodyCPwrSwch,if7).

if(if8,[camPwrSwch]).


if(if9,[cellNavig,navigGW,gwhlSys]).
before(cellNavig,navigGW,if9).
before(navigGW,gwhlSys,if9).

if(if10,[btNavig,navigGW,gwhlSys]).
before(btNavig,navigGW,if10).
before(navigGW,gwhlSys,if10).


if(if11,[obdGw,gwhlSys]).
before(obdGw,gwhlSys,if11).

%% Uncomment for exploration
explore(1,firewall) .
explore(1,secMonCH) .
explore(1,secMonCP). 
:- nmit([Z,V,P,T]) .
