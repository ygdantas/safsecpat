%%%%%%%%%%%%% Security to Safety %%%%%%%%%%%%%

%% Firewall conflict
%%% There is a hazard associated to the firewall, if a firewall is deployed. 
%%% There is a sub-hazard associated to the above hazard, if there is a hazard associated to the component 
%%%	 the receives outputs from the deployed firewall

%fl([CP,CP,err,cat]) :- firewall(ID,CP,Comm,_,_,FWCP),
%					  can(Comm),
%					  dep(CH,Comm),
%					  fl([FL,FWCP,omission,cat]) .

%fl([Comm,Comm,err,cat]) :- firewall(ID,Comm,CP,_,_,FWCP),
%					  can(Comm),
%					  dep(CH,Comm),
%					  fl([FL,FWCP,omission,cat]) .

%%hz([CP,err,cat]) :- firewall(ID,Comm,CP,_,_,FWCP),
%%					  can(Comm),
%%					  dep(navigGW,Comm).
%%				      ch(CH,Comm,CP),
%%					  hz([FWCP,omission,cat]) .

%%hz([Comm,err,cat]) :- firewall(ID,Comm,CP,_,_,FWCP),
%%				      ch(CH,CP,Comm),
%%					  hz([FWCP,omission,cat]) .

% TODO: new HZ associated to all elements after CP (in the information flow)?					  

ft(IDPAT,[FW]) :- xsecurityPattern(IDPAT,[firewall | ATTRSPAT]), getFirewallCP(IDPAT,FW).
fl(IDFL,[err]) :- xsecurityPattern(IDPAT,[firewall | ATTRSPAT]), getFirewallCP(IDPAT,FW), ft(IDPAT,ATTRSFT), getFaultCP(IDPAT,FW), createID(IDPAT,firewall,IDFL).
ft2fl(IDPAT,IDFL) :- xsecurityPattern(IDPAT,[firewall | ATTRSPAT]), getFirewallCP(IDPAT,FW), ft(IDPAT,ATTRSFT), getFaultCP(IDPAT,FW), fl(IDFL,[err]), createID(IDPAT,firewall,IDFL).

ft(IDPAT,[MON]) :- xsecurityPattern(IDPAT,[securityMonitorApp | ATTRSPAT]), getSecMonCP(IDPAT,MON).
fl(IDFL,[err]) :- xsecurityPattern(IDPAT,[securityMonitorApp | ATTRSPAT]), 
				  getSecMonCP(IDPAT,MON), ft(IDPAT,ATTRSFT), getFaultCP(IDPAT,MON), createID(IDPAT,securityMonitorApp,IDFL).
ft2fl(IDPAT,IDFL) :- xsecurityPattern(IDPAT,[securityMonitorApp | ATTRSPAT]), 
					 getSecMonCP(IDPAT,MON), ft(IDPAT,ATTRSFT), getFaultCP(IDPAT,MON), fl(IDFL,[err]), createID(IDPAT,securityMonitorApp,IDFL).


%% mcs(IDMCS,FLISTFAIL) :- xsecurityPattern(IDPAT,[firewall,ATTRSPAT), 
%%                         getFirewallCP(IDPAT,FW),
%%                         ft(IDFT,ATTRSFT),
%%                         getFaultCP(IDFT,FW),
%%                         ft2fl(IDFT,IDFL),
%%                         fl(IDFL,ATTRSFL),

%% fl2Hz(ID2,IDH) :- firewall(ID,Comm,CP,_,_),
%% 				  fl([ID2,ID,TYPE1,SEV1]),
%% 				  can(Comm),
%% 				  dep(CH1,Comm),
%% 				  ch(CH2,_,CP),
%% 				  if(IF,PATH),
%% 				  before(CH1,CH2,IF),
%% 				  ch(CH3,CPI,CPO),
%% 				  before(CH3,CH1,IF),
%% 				  fl([ID3,CPI,err,SEV2]),
%% 				  hz([IDH,CP2,TYPE3]),
%% 				  fl2Hz(ID3,IDH) .




%%%%%%%%%%%%% Safety to Security %%%%%%%%%%%%%
pThreat(IDPAT,[CP,CHECKER,SECTYPE,SECSEV]) :- xsafetyPattern(IDPAT,ATTRSPAT),
										   getSafPatChecker(IDPAT,CHECKER),
										   dep(CP,CHECKER),
							               getSafPatTarget(IDPAT,TARGET),
							               ft(IDFT,ATTRSFT),
							               getFaultCP(IDFT,TARGET),
							               ft2fl(IDFT,IDFL),
							               fl(IDFL,ATTRSFL),
							               getFailureType(IDFL,FAILTYPE),
							               typeMap(FAILTYPE,SECTYPE),
								           hz(IDHZ,ATTRSHZ),
								           mcs(IDMCS,FLISTFAIL),
								           #member(IDFL,FLISTFAIL),
								           lmcs2hz(LIDMCS,IDHZ),
								           #member(IDMCS,LIDMCS),							               
								           getHazardSev(IDHZ,SAFSEV),
								           severityMap(SAFSEV,SECSEV).

pThreat(IDPAT,[no_deployment,CHECKER,SECTYPE,SECSEV]) :- xsafetyPattern(IDPAT,ATTRSPAT),
										   getSafPatChecker(IDPAT,CHECKER),
							               getSafPatTarget(IDPAT,TARGET),
							               not dep(CP,CHECKER),
							               cp(CP),
							               ft(IDFT,ATTRSFT),
							               getFaultCP(IDFT,TARGET),
							               ft2fl(IDFT,IDFL),
							               fl(IDFL,ATTRSFL),
							               getFailureType(IDFL,FAILTYPE),
							               typeMap(FAILTYPE,SECTYPE),
								           hz(IDHZ,ATTRSHZ),
								           mcs(IDMCS,FLISTFAIL),
								           #member(IDFL,FLISTFAIL),
								           lmcs2hz(LIDMCS,IDHZ),
								           #member(IDMCS,LIDMCS),							               
								           getHazardSev(IDHZ,SAFSEV),
								           severityMap(SAFSEV,SECSEV).

