% run dlv paper-example.dlv
% === Safety ===
% Hazards
% These are derived from an argumentation.
% For now these are manually inserted

% CP
% TODO:
%  * SIL level is derived from the haz.

% Software and Hardware
% Hardware are either
%   * can(ID) -> denoting a can bus
%   * ecu(ID) -> denoting an ECU where SW is deployed
%   * hw(ID) -> generic (unspecified hw), e.g., sensors.
%   IDEA (if usefule): we could consider the hardware topology
%     e.g., ecu1 <-- can -> ecu2, 
%%    where ecu1 and ecu2 communicate using can

% Software is any functional component deployed in an ECU.
% (Used for some safety patterns, e.g., N-Programming)




%position(CH,IF,POS) :- if(IF,PATH), ch(CH,fw,voterdm),getnth(PATH,POS,CH).


%before(CH1,CH2,IF) :-
%     ch(CH1,_,_),
%     ch(CH2,_,_),
%     if(IF,PATH),
%     getnth(PATH, POS1, CH1),
%     getnth(PATH, POS2, CH2),
%     POS1 < POS2 .


% ASIL
%% ISO_DIS_26262-5(E)-Character_PDF_document-HWPATTERNS
%% Annex G: Table G.1 â€” Random hardware failure target values
%% asil(HZ_ID, ASIL Level, Random hardware failure target value) 
%asil(CP, d) .
%failProb(d, 8) .  
%asil(CP, c) .
%failProb(c, 7) .  
%asil(CP, b) .
%failProb(b, 7) .  
%asil(CP, a) .
%failProb(a, 7) .  
%asil([CP,TP,cat], d, 8) :- hz([CP,TP,cat]) .
%asil([CP,TP,haz], c, 7) :- hz([CP,TP,haz]) .
%asil([CP,TP,maj], b, 7) :- hz([CP,TP,maj]) .
%asil([CP,TP,min], a, 7) :- hz([CP,TP,min]) .
% Hazards
% hz(id,cp,type,sev), where type can be:
%    * err -> for erroneous
%    * loss -> for loss of function
%% and sev (for severity) can be 
%%   * cat -> catastrophic
%%   * haz -> hazardeous
%%   * maj -> major
%%   * min -> minimal

%grSev(cat,haz).
%grSev(haz,maj).
%grSev(maj,min).
% Transitive relation
%grSev(X,Y) :- grSev(X,Z),grSev(Z,Y).

%%%% Table Hazards x Severity
%%% Pat terms: safMon,1002,Watchdog,
%% TODO:
%applicablePat(CP,safMon) :- 
%  hz(ID,CP,err,maj),
%  hz(ID,CP,loss,min).

% TODO: Put others.

% basic hazards, i.e., the leaves of the HARA
% TODO to hz: 
% * rename / compute cut-sets
%% * Add severity level
%% * Add exposure, (likelihood)?

%% Uncomment for exploration
% explore(1,safMon) .
% explore(1,hdr) .
% explore(1,tmr) .


%% Hazard <- failure
%hz([IDH,CP,SEV],ID) :- fl([ID,CP,TYPE,SEV]) .

ctl([IDH,CP1,SEV1]) :-  fl([ID,CP,TYPE,SEV]),
						hz([IDH,CP1,SEV1]),
						fl2Hz(ID,IDH), 
						not ntol([ID,CP,TYPE,SEV]) .

%nAllFlTol([IDH,CP1,SEV1]) :- hz([IDH,CP1,SEV1]),
%						    fl2Hz(ID,IDH),
%						    ntol([ID,CP,TYPE,SEV]).					

%nctl([IDH,CP1,SEV1]) :- hz([IDH,CP1,SEV1]), 
%						fl2Hz(ID,IDH),
%						not ctl([IDH,CP1,SEV1])

nctl([IDH,CP1,SEV1]) :-  fl([ID,CP,TYPE,SEV]),
						 hz([IDH,CP1,SEV1]),
  						 fl2Hz(ID,IDH),
%  						 nAllFlTol([IDH,CP1,SEV1]) . 						  
						 ntol([ID,CP,TYPE,SEV]) .


%%% HARA
%hz([FWCP,omission,cat]).
ntol([ID,CP,TYPE,SEV]) :- fl([ID,CP,TYPE,SEV]), 
	not tol ([ID,CP,TYPE,SEV]) .


%% new
%ntol([ID,CP,TYPE,SEV]) :- basic ([ID,CP,TYPE,SEV]), 
%	not tol ([ID,CP,TYPE,SEV]) .
%% new
%basic([ID,CP,TYPE,SEV]) :- fl([ID,CP,TYPE,SEV]),
%			not has_subFl([CP,TYPE,SEV]).
%% new
%derived([ID,CP,TYPE,SEV]) :- fl([ID,CP,TYPE,SEV]),
%			not basic([ID,CP,TYPE,SEV]) .
%% new
%ntol([ID,CP,TYPE,SEV]) :- fl([ID,CP,TYPE,SEV]),
%			 derived([ID,CP,TYPE,SEV]),
%			 hasNTOLSubFl([ID,CP,TYPE,SEV]).
%% new
%tol([ID,CP,TYPE,SEV]) :- fl([ID,CP,TYPE,SEV]),
%			derived([ID,CP,TYPE,SEV]),
%			not hasNTOLSubFl([ID,CP,TYPE,SEV]) .

%% new
%hasNTOLSubFl([ID,CP,TYPE,SEV]) :- fl([ID,CP,TYPE,SEV]),
 % 								  subFl([IDD,SCP,STYPE,SSEV],[ID,CP,TYPE,SEV]),
  % 								  ntol([IDD,SCP, STYPE, SSEV]).

	
%nctl([CP,TYPE,SEV]) :- basic ([CP,TYPE,SEV]), 
%	not ctl ([CP,TYPE,SEV],_).
%	safPat(CP) .
% not safPat(IDPAT).

%nctl(H,CP,TYPE,SEV) :- basic(H,CP,TYPE,SEV),
%           not ctl(H,CP,TYPE,SEV) .

%basic([CP,TYPE,SEV]) :- hz([CP,TYPE,SEV]),
%			not has_subHz([CP,TYPE,SEV]).




%basic(H,CP,TYPE,SEV) :- hz(H,CP,TYPE,SEV),
%            not has_subHz(H).
						
%%has_subHz(H,CP,TYPE,SEV) :- subHz(SH,SCP,STYPE,SSEV,H,CP,TYPE,SEV) .
%has_subHz([CP,TYPE,SEV]) :- subHz([SCP,STYPE,SSEV],[CP,TYPE,SEV]) .
%% new
%has_subFz([ID,CP,TYPE,SEV]) :- subFl([IDD,SCP,STYPE,SSEV],[ID,CP,TYPE,SEV]) .

%has_subHz(H) :- subHz(SH,H) .

% derived hazards, i.e., have sub-hazards



%derived(H,CP,TYPE,SEV) :- hz(H,CP,TYPE,SEV),
%              not basic(H,CP,TYPE,SEV) .              

% A derived hazard is not controllable 
% if it has a sub-hazard that is not controllable.



%nctl(H,CP,TYPE,SEV) :- hz(H,CP,TYPE,SEV),
%           derived(H,CP,TYPE,SEV),
%           hasNCTLSubHz(H,CP,TYPE,SEV).

% Otherwise it is controllable.


%ctl([CP,TYPE,SEV],IDPAT) :- hz([CP,TYPE,SEV]),
%					derived([CP,TYPE,SEV]),
%					not hasNCTLSubHz([CP,TYPE,SEV]),
%					safPat(IDPAT) .
 

%ctl(H,CP,TYPE,SEV) :- hz(H,CP,TYPE,SEV),
%          derived(H,CP,TYPE,SEV),
%          not hasNCTLSubHz(H,CP,TYPE,SEV) .

% Exists a sub hazard that is not controllable

%hasNCTLSubHz(H,CP,TYPE,SEV) :- hz(H,CP,TYPE,SEV),
%                   subHz(SH,SCP,STYPE,SSEV,H,CP,TYPE,SEV),
%                   subHz(SH,H),
 %                  hz(SH,SCP,STYPE,SSEV),
	%                 not ctl(SH,SCP,STYPE,SSEV) .
 %                   nctl(SH, SCP, STYPE, SSEV).

%% ========== HAZOP ===========
%%% omission: Function not provided when expected
%%% commission: Function provided when not expected
%%% late: Function provided too late
%%% early: Function provided too late
%%% valHigh: Function provided value higher than expected
%%% valLow: Function provided value lower than expected

 %% hz(["hz",CP],CP,err,SEV) :- hz(["hz",ID],CP,omission,SEV).
 %% hz(["hz",CP],CP,err,SEV) :- hz(["hz",ID],CP,comission,SEV).
 %% hz(["hz",CP],CP,err,SEV) :- hz(["hz",ID],CP,late,SEV).
 %% hz(["hz",CP],CP,err,SEV) :- hz(["hz",ID],CP,early,SEV).
 %% hz(["hz",CP],CP,err,SEV) :- hz(["hz",ID],CP,valHigh,SEV).
 %% hz(["hz",CP],CP,err,SEV) :- hz(["hz",ID],CP,valLow,SEV).

%% E.g., hz(id,cp,omission).

% ======== Safety patterns ========

% ****** Safety Pattern: Monitor  ***********
% safMon(id,cp,ic,oc,fs,min,mout,mcp), where
%           
%     --ic1------>cp --oc1------> 
%     --icn------>  --ocm------> 
%        |        ^             |
%        |        |             |
%        |        fs            |
%        |        |             |
%        -min1--> mcp <--mout1 --
%        -minn-->     <--moutn --

		% cp -> denotes the the corresponding component to which
		%       the monitor is associated to
		% ic,oc -> denote the input and output channels that are monitored
		% ss -> denotes the output channel that transmits the shutdown signal
		% min -> denotes the name of channel with the input channel to the mcp
		% mout -> denotes the name of channel with the output channel to the mcp
		% mcp -> denotes the monitor component
asmPAT(ID,"has been verified") :- safMon(ID,_,_,_,_,_,_) .
asmPAT(ID,"policies has been defined") :- safMon(ID,_,_,_,_,_,_) .
safPat(ID) :- safMon(ID,_,_,_,_,_,_) .
redundancy(ID) :- safMon(ID,_,_,_,_,_,_) .
safMon(ID,CP,[IC],[OC],FS,[MIN],[MOUT]) :- xsafMon(ID,CP,[IC],[OC],FS,[MIN],[MOUT]).

cp(ID) :- xsafMon(ID,CP,[IC],[OC],FS,[MIN],[MOUT]), 
			 explore(N,P).
subcp(ID,CP1) :- xsafMon(ID,CP,[IC],[OC],FS,[MIN],[MOUT]),
									subcp(CP,CP1), 
									explore(N,safMon). 

ch(FS,ID,CP) :- xsafMon(ID,CP,[IC],[OC],FS,[MIN],[MOUT]), 
				 explore(N,safMon).

ch(MIN,ECP,ID) :- xsafMon(ID,CP,[IC],[OC],FS,[MIN],[MOUT]),
									 ch(IC,ECP,CP), 
									 explore(N,safMon).

%ch(MOUT,CP,MCP) :- safMon(ID,CP,IC,OC,FC,MIN,MOUT,MCP), explore(N,safMon).

%cp(MCP) :- safMon(ID,CP,[IC],[OC],SS,MIN,MOUT,MCP), 
%           explore(N,safMon).
%subcp(MCP,CP1) :- safMon(ID,CP,[IC],[OC],SS,MIN,MOUT,MCP),
%                  subcp(CP,CP1), explore(N,safMon). 

%ch(SS,MCP,CP) :- safMon(ID,CP,[IC],[OC],SS,MIN,MOUT,MCP), 
%				 explore(N,safMon).

%ch(MIN,ECP,MCP) :- safMon(ID,CP,[IC],[OC],FC,MIN,MOUT,MCP),
%                   ch(IC,ECP,CP), 
%                   explore(N,safMon).

%ch(MOUT,CP,MCP) :- safMon(ID,CP,[IC],[OC],FC,MIN,MOUT,MCP), 
%                   explore(N,safMon).


% Safety argumentation with patterns.
tolby([ID,CP,err,SEV],ID2) :- fl([ID,CP,err,SEV]), 
					 safMon(ID2,CP,_,_,_,_,_),
					 not inpNotCovSF(ID2),
					 not outNotCovSF(ID2) .          

tol([ID,CP,err,SEV]) :- fl([ID,CP,err,SEV]), 
                     safMon(ID2,CP,_,_,_,_,_),
		    		 not inpNotCovSF(ID2),
		    		 not outNotCovSF(ID2) .           

tol([ID,CP,valHigh,SEV]) :- fl([ID,CP,valHigh,SEV]), 
			 			safMon(ID2,CP,_,_,_,_,_),
			 			not inpNotCovSF(ID2),
			 			not outNotCovSF(ID2) .           

tol([ID,CP,valLow,SEV]) :- fl([ID,CP,valLow,SEV]), 
			 			safMon(ID2,CP,_,_,_,_,_),
						not inpNotCovSF(ID2),
						not outNotCovSF(ID2).

tolby([ID,CP,omission,SEV],ID2) :- fl([ID,CP,omission,SEV]), 
				 safMon(ID2,CP,_,_,_,_,_),
				 not inpNotCovSF(ID2),
				 not outNotCovSF(ID2).


tol([ID,CP,omission,SEV]) :- fl([ID,CP,omission,SEV]), 
				 safMon(ID2,CP,_,_,_,_,_),
				 not inpNotCovSF(ID2),
				 not outNotCovSF(ID2).


isexploration :- explore(N,P) .

inpNotCovSF(ID2) :- 
		 safMon(ID2,CP,ICHs,_,FS,_,_),
		 ch(CH,_,CP),
		 CH != FS,
		 not #member(CH,ICHs),
		 not isexploration .

outNotCovSF(ID2) :- 
		 safMon(ID2,CP,_,OCHs,_,MIN,MOUT),
		 ch(CH,CP,_),
		 not #member(CH,MIN),
		 not #member(CH,MOUT),
		 not #member(CH,OCHs), 
		 not isexploration .

% ****** Safety Pattern: Protected Single Channel (psc) ***********

asmPAT(ID,"has been verified") :- psc(ID,CP,IC,OC,FS,MIN,MOUT) .
asmPAT(ID,"policies has been defined") :- psc(ID,CP,IC,OC,FS,MIN,MOUT) .
safPat(ID) :- psc(ID,CP,IC,OC,FS,MIN,MOUT) .
psc(ID,CP,IC,OC,FS,MIN,MOUT) :- xpsc(ID,CP,IC,OC,FS,MIN,MOUT) .

cp(ID) :- xpsc(ID,CP,IC,OC,FS,MIN,MOUT), 
			 explore(N,P).

ch(FS,ID,CP) :- xpsc(ID,CP,IC,OC,FS,MIN,MOUT), 
				 explore(N,psc).

ch(MIN,ECP,ID) :- xpsc(ID,CP,IC,OC,FS,MIN,MOUT),
									 ch(IC,ECP,CP), 
									 explore(N,psc).


% Safety argumentation with patterns.
tolby([ID,CP,err,SEV],ID2) :- fl([ID,CP,err,SEV]),
						   	  psc(ID2,CP,_,_,_,_,_) .
						   
tol([ID,CP,err,SEV]) :- fl([ID,CP,err,SEV]), 
						   psc(ID2,CP,_,_,_,_,_) .
						   
tol([ID,CP,valHigh,SEV]) :- fl([ID,CP,valHigh,SEV]), 
						   psc(ID2,CP,_,_,_,_,_) .
						   
tol([ID,CP,valLow,SEV]) :- fl([ID,CP,valLow,SEV]), 
						   psc(ID2,CP,_,_,_,_,_) .
						   
tolby([ID,CP,omission,SEV],ID2) :- fl([ID,CP,omission,SEV]), 
						   psc(ID2,CP,_,_,_,_,_) .

tol([ID,CP,omission,SEV]) :- fl([ID,CP,omission,SEV]), 
						   psc(ID2,CP,_,_,_,_,_) .
   
% ****** Safety Pattern: Watchdog  ***********
% watchDog(pat2,bms,scwd,chlvswd,wd).
% watchDog(id,cp,scwd,chlvswd,wd), where

%           --ic------> cp --oc----> 
%              |       ^  |        |
%              |       |  |        |
%              |     scwd chlvswd   |
%              |       |  |        |
%                       wdcp


		% cp -> denotes the corresponding component to which
		%       the watchdog is associated to
		% chscwd -> denotes the output channel that transmits the shutdown signal from the watchdog to cp
		% chlvswd -> denotes the name of channel that transmit liveness messages to the wd 
		% wdcp -> denotes the watchdog component


% Component 
asmPAT(ID,"has been verified") :- watchDog(ID,CP,CHSCWD,CHLVSWD) .
safPat(ID) :- watchDog(ID,CP,CHSCWD,CHLVSWD) .
watchDog(ID,CP,CHSCWD,CHLVSWD) :- xwatchDog(ID,CP,CHSCWD,CHLVSWD) .
cp (ID) :- xwatchDog(ID,CP,CHSCWD,CHLVSWD),
			 explore(N,watchdog).
%subcp(WD,CP1) :- watchDog(ID,CP,SCWD,chlvswd,WD),
%                  subcp(CP,CP1). 

% Logical Channels 
% Output from CP to Watchdog
ch(CHLVSWD,CP,ID) :- xwatchDog(ID,CP,FC,CHLVSWD),
						 explore(N,watchdog).

%% Shutdown signal from watchdog to CP
ch(CHSCWD,ID,CP) :- xwatchDog(ID,CP,CHSCWD,CHLVSWD),
						explore(N,watchdog).

% Safety argumentation with patterns.
tolby([CP,loss,SEV],ID2) :- fl([ID,CP,loss,SEV]),
		      watchDog(ID2,CP,_,_).

tol([ID,CP,loss,SEV]) :- fl([ID,CP,loss,SEV]),
		      watchDog(ID2,CP,_,_).



% ****** Heterogeneous Duplex Redundancy (HDR) ***********
% **** Purpose: 
%			* Increase redundancy of existing hardware
%				* path redundancy
%				* hardware redundancy
% **** Controlability: 
%			* hazards of erroneous type
%			* hazards of omission type


%moon2FSPat(pat3,ch1,sc1,sc2,chmoon1,chmoon2,votercp,chout,outcp).
%% Before
%%  sc1 --- ch1 --> [...] -> outc
%%

% Applied pattern:
% sc1 --- chMoon1 ----\
%                      -> voter -oCh--> outc
% sc2 --- chMoon2 ----/

%% Remark. Notice that if sc2 is taken from the path [...] (in the diagram above), 
%% one is using a voter for additional path redundancy.

		% sc1 -> component 1
		% sc2 -> component 2
		% chMoon1 -> channel1 that transmits input 1 to the voter
		% chMoon2 -> channel2 that transmits input 2 to the voter
		% vote -> voter component
		% oCh -> channel trat transmits output to out component
		% out -> output component

% Components
%% SC1 component for input 1
%cp(SC1) :- moon2FSPat(ID,CH1,SC1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP).
%% SC2 component for input 2
%cp(SC2) :- moon2FSPat(ID,CH1,SC1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP).
%% Voter component

%safPat(ID) :- hdr(ID,SC1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP) .
asmPAT(ID,"has been verified") :- hdr(ID,SC1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP) .
%asmPAT(ID,"must be") :- hdr(ID,SC1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP) .
safPat(ID) :- hdr(ID,SC1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP) .
redundancy(ID) :- hdr(ID,SC1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP) .
hdr(ID,SC1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP) :- xhdr(ID,SC1,CH1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP).


cp(VOTERCP) :- xhdr(ID,SC1,CH1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP),
				 explore(N,hdr).

%% remove(ch) denotes that the channel ch 
%% shall no longer be considered.
%% remove(cp) denotes that the component cp 
%% shall no longer be considered.
remove(CH1) :- xhdr(ID,SC1,CH1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP),
		ch(CH1,_,_),
		explore(N,hdr).


%% hdr(...) :- xhdr(...,CH1,...) .


% Logical Channels
%% SC1 -> VOTERCP
ch(CHMOON1,SC1,VOTERCP) :- xhdr(ID,SC1,CH1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP),
							 explore(N,hdr).
%% SC2 -> VOTERCP
ch(CHMOON2,SC2,VOTERCP) :- xhdr(ID,SC1,CH1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP),
							 explore(N,hdr).
%% VOTERCP -> OUTCP
ch(CHOUT,VOTERCP,OUTCP) :- xhdr(ID,SC1,CH1,SC2,CHMOON1,CHMOON2,VOTERCP,CHOUT, OUTCP),
							 explore(N,hdr).

% Safety argumentation for MooN for redundant sensors 
%ctl(ID,SC1,err,SEV) :- hz(ID,SC1,err,SEV),
%           moon2FSPat(ID3,CH1,_,_,_,_,_,_,_),
%           ch(CH1,SC1,_).

%%% Controlling by Hardware Redundancy
tolby([ID,SC1,err,SEV],ID3) :- fl([ID,SC1,err,SEV]),
					 hdr(ID3,_,_,_,_,VOTERCP,_,_),
					 not sw(SC1),
					 ch(_,SC1,VOTERCP).
tol([ID,SC1,err,SEV]) :- fl([ID,SC1,err,SEV]),
					 hdr(ID3,_,_,_,_,VOTERCP,_,_),
					 not sw(SC1),
					 ch(_,SC1,VOTERCP).

%%% Controlling by Path Redundancy
%%%% Condition when CP2 may be the same component with an omission hazard
%ctl(ID,CP,omission,SEV) :-
%  hz(ID,CP,omission,SEV),

tolby([ID,CP,omission,SEV],IDPAT) :-
	fl([ID,CP,omission,SEV]),  
	cp(CP1),
	cp(CP),
	ch(CHOUT,CP1,_),
	ch(CH,CP,_),
	if(IF,PATH),
	% output of cp1 is before or equal than the output from the cp with hazard    
	before(CHOUT,CH,IF),
	hdr(IDPAT,CP1,CP,_,_,_,_,_).



tol([ID,CP,omission,SEV]) :-
	fl([ID,CP,omission,SEV]),  
	cp(CP1),
	cp(CP),
	ch(CHOUT,CP1,_),
	ch(CH,CP,_),
	if(IF,PATH),
	% output of cp1 is before or equal than the output from the cp with hazard    
	before(CHOUT,CH,IF),
	hdr(IDPAT,CP1,CP,_,_,_,_,_).

%%% Controlling by Path Redundancy
%%%% Condition when CP2 is not the same component with an omission hazard
%ctl(ID,CP,omission,SEV) :-
%  hz(ID,CP,omission,SEV),

tolby([ID,CP,omission,SEV],IDPAT) :-
	fl([ID,CP,omission,SEV]),  
	CP2 != CP,
	cp(CP1),
	cp(CP2),
	ch(CHOUT,CP1,_),
	ch(CHIN,_,CP2),
	cp(CP),
	ch(CH,CP,_),
	if(IF,PATH),
	% output of cp1 is before or equal than the output from the cp with hazard    
	before(CHOUT,CH,IF),
	% output of cp with hazard is before of equal the input of cp2
	before(CH,CHIN,IF),
	hdr(IDPAT,CP1,CP2,_,_,_,_,_).

tol([ID,CP,omission,SEV]) :-
	fl([ID,CP,omission,SEV]),  
	CP2 != CP,
	cp(CP1),
	cp(CP2),
	ch(CHOUT,CP1,_),
	ch(CHIN,_,CP2),
	cp(CP),
	ch(CH,CP,_),
	if(IF,PATH),
	% output of cp1 is before or equal than the output from the cp with hazard    
	before(CHOUT,CH,IF),
	% output of cp with hazard is before of equal the input of cp2
	before(CH,CHIN,IF),
	hdr(IDPAT,CP1,CP2,_,_,_,_,_).


% ****** Triple Modular Redundancy (TMR)  ***********
% **** Purpose: 
%			* Increase redundancy of existing hardware
%				* hardware redundancy
% **** Controlability: 
%			* hazards of erroneous type

% Safety Pattern: N-OUT-OF-3 (MOON) with Fail Safe
%moon2FSPat(pat3,ch1,sc1,sc2,sc3,chmoon1,chmoon2,chmoon3,votercp,chout,outcp).
%% Before
%%  sc1 --- ch1 --> [...] -> outc
%%

% Applied pattern:
% sc1 --- chMoon1 ----\
%                      \
% sc2 --- chMoon2 ------> voter -oCh--> outc
%                      /
% sc3 --- chMoon3 ----/

%% Remark. Notice that if sc2 is taken from the path [...] (in the diagram above), 
%% one is using a voter for additional path redundancy.

		% sc1 -> component 1
		% sc2 -> component 2
		% sc3 -> component 3    
		% chMoon1 -> channel1 that transmits input 1 to the voter
		% chMoon2 -> channel2 that transmits input 2 to the voter
		% chMoon3 -> channel2 that transmits input 3 to the voter    
		% vote -> voter component
		% oCh -> channel trat transmits output to out component
		% out -> output component

%moon3SFPat(nuMoon3SF,ch1,ds,sc2,sc3,chmoon1,chmoon2,chmoon1,votercp,chout, accm) .

% Components
%% SC2 component for input 2
asmPAT(ID,"has been verified") :- tmr(ID,SC1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP) .
safPat(ID) :- tmr(ID,SC1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP) .
tmr(ID,SC1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP) :- xtmr(ID,SC1,CH1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP) .
cp(SC2) :- xtmr(ID,SC1,CH1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP),
				 explore(N,tmr). 
hw(SC2) :- xtmr(ID,SC1,CH1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP),
			 explore(N,tmr).
%% SC3 component for input 3
cp(SC3) :- xtmr(ID,SC1,CH1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP),
					 explore(N,tmr).
hw(SC3) :- xtmr(ID,SC1,CH1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP),
			 explore(N,tmr).	
%% Voter component
cp(VOTERCP) :- xtmr(ID,SC1,CH1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP),
				 explore(N,tmr).
%% remove(ch) denotes that the channel ch 
%% shall no longer be considered.
%% remove(cp) denotes that the component cp 
%% shall no longer be considered.
remove(CH1) :- xtmr(ID,SC1,CH1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP),
			 ch(CH1,_,_),
			 explore(N,tmr).

% Logical Channels
%% SC1 -> VOTERCP
ch(CHMOON1,SC1,VOTERCP) :- xtmr(ID,SC1,CH1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP),
							 explore(N,tmr).	
%% SC2 -> VOTERCP
ch(CHMOON2,SC2,VOTERCP) :- xtmr(ID,SC1,CH1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP),
							 explore(N,tmr).	
%% SC3 -> VOTERCP
ch(CHMOON3,SC3,VOTERCP) :- xtmr(ID,SC1,CH1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP),
							 explore(N,tmr).	
%% VOTERCP -> OUTCP
ch(CHOUT,VOTERCP,OUTCP) :- xtmr(ID,SC1,CH1,SC2,SC3,CHMOON1,CHMOON2,CHMOON3,VOTERCP,CHOUT, OUTCP),
							 explore(N,tmr).	

%% Safety argumentation for MooN for redundant sensors 
%ctl(ID,SC1,err,SEV) :- hz(ID,SC1,err,SEV),
%           moon3FSPat(ID3,CH1,_,_,_,_,_,_,_,_,OutCP),
%           ch(CH1,SC1,_).

tolby([ID,SC1,err,SEV],ID3) :- fl([ID,SC1,err,SEV]),
					 tmr(ID3,_,_,_,_,_,_,VOTERCP,_,OutCP),
					 ch(_,SC1,VOTERCP).  

tol([ID,SC1,err,SEV]) :- fl([ID,SC1,err,SEV]),
					 tmr(ID3,_,_,_,_,_,_,VOTERCP,_,OutCP),
					 ch(_,SC1,VOTERCP).           
%           ch(CH,SC1,_).




% ****** Safety Pattern: N-VERSION-PROGRAMMING  ***********
%nProgrammingPat(id,v1,chOut1,chOut1,chNOut1,v2,chInp2,chOut2,voterNPcp,chNPOut,outcp)
%% Before
%  chInp1 --> v1 -> chOut1
%

% Applied pattern:
%  chInp1 --> v1 --> chOut1 \  
%                            \
%                             --> voterNPcp --> chNPOut--> outcp
%                            /
%  chInp2 --> v2 -->  chOut2 /

%% Remark. Notice that if sc2 is taken from the path [...] (in the diagram above), 
%% one is using a voter for additional path redundancy.

		% chInp1 -> denotes the channel that transmits the input1 to v1 (version 1)
		% v1 -> denotes the version 1 component
		% chOut1 -> denotes the channel that transmits the output from v1. This channel is removed
		% so that a new channel is implemented to transmit the output to the voterNPcp
		% chNOut1 -> denotes the new channel to transmit the output from v1 to the voterNPcp
		% v2 -> denotes the version 2 component
		% chInp2 -> denotes the channel that transmits the input1 to v2
		% chOut2 -> denotes the channel that transmits the output from v2 to the voterNPcp
		% voterNPcp -> denotes the voter component
		% chNPOut -> denotes the channel that transmits the output from the voterNPcp to outcp
		% outcp -> denotes the component that receives the output from the voterNPcp component

% Components
%nProgramming(ID,V1,[CHINP1],[CHOUT1],[CHNOUT1],V2,[CHINP2],[CHOUT2],[VOTERNPCP],[CHNPOUT],[OUTCP])
%nProgramming(ID,V1,[CHINP1],[CHOUT1],V2,[VOTERNPCP],[CHNPOUT],[OUTCP])
%% V2 (version 2) component
asmPAT(ID,"has been verified") :- nProg(ID,_,_,_,_,_,_) .
safPat(ID) :- nProg(ID,_,_,_,_,_,_) .
nProg(ID,V1,[CHINP1],V2,[VOTERNPCP],[CHNPOUT],[OUTCP]) :- xnProg(ID,V1,[CHINP1],[CHOUT1],V2,[VOTERNPCP],[CHNPOUT],[OUTCP]) . 
cp(V2) :- xnProg(ID,V1,[CHINP1],[CHOUT1],V2,[VOTERNPCP],[CHNPOUT],[OUTCP]),
					dep(V1,ECU),
					explore(N,nProg).
%% V2 (version 2) is implemented in software. 
%dep(V2,ECU) :- nProgrammingPat(ID,V1,CHINP1,CP1,CHOUT1,CHNOUT1,V2,CHINP2,CHOUT2,VOTERNPCP,CHNPOUT,OUTCP).

 %% Voter component
cp(VOTERNPCP) :- xnProg(ID,V1,[CHINP1],[CHOUT1],V2,[VOTERNPCP],[CHNPOUT],[OUTCP]),
						 dep(V1,ECU),
						 explore(N,nProg).

%% remove(ch) denotes that the channel ch 
%% shall no longer be considered.
remove(CHOUT1) :- xnProg(ID,V1,[CHINP1],[CHOUT1],V2,[VOTERNPCP],[CHNPOUT],[OUTCP]),
							dep(V1,ECU),
							ch(CHOUT1,_,_),
							explore(N,nProg).

% Logical Channels
%% CP1 -> V2
%ch(CHINP2,CP,V2) :- nProg(ID,V1,CHINP1,CHOUT1,CHNOUT1,V2,CHINP2,CHOUT2,VOTERNPCP,CHNPOUT,OUTCP),
%        			dep(V1,ECU), 
%        			ch(CHINP1, CP, V1),
%        			explore(N,nProg).
%% V1 -> VOTERCP
%ch(CHNOUT1,V1,VOTERNPCP) :- nProg(ID,V1,CHINP1,CHOUT1,CHNOUT1,V2,CHINP2,CHOUT2,VOTERNPCP,CHNPOUT,OUTCP),
%					        dep(V1,ECU),
%				        explore(N,nProg).
%% V2 -> VOTER
%ch(CHOUT2,V2,VOTERNPCP) :- nProg(ID,V1,CHINP1,CHOUT1,CHNOUT1,V2,CHINP2,CHOUT2,VOTERNPCP,CHNPOUT,OUTCP),
%					       dep(V1,ECU),
%					       explore(N,nProg).
%% VOTER -> OUTPUT COMPONENT
%ch(CHNPOUT,VOTERNPCP,OUTCP) :- nProg(ID,V1,CHINP1,CHOUT1,CHNOUT1,V2,CHINP2,CHOUT2,VOTERNPCP,CHNPOUT,OUTCP),
%					           dep(V1,ECU),
%					           explore(N,nProg).

% Safety argumentation for MooN for redundant sensors 
tolby([ID,V1,err,SEV],ID2) :- fl([ID,V1,err,SEV]),
					nProg(ID2,V1,_,_,_,_,_),
					sw(V1),
					not inpNotCovNP(ID2) .

tol([ID,V1,err,SEV]) :- fl([ID,V1,err,SEV]),
					 nProg(ID2,V1,_,_,_,_,_),
					sw(V1),
					 not inpNotCovNP(ID2) .

inpNotCovNP(ID2) :-
			 nProg(ID2,V1,ICHs,_,_,_,_), 
			 %safMon(ID2,CP,ICHs,_,SC,_,_,_),
			 ch(CH,_,V1),
			 %CH != SC,
			 not #member(CH,ICHs),
			 not isexploration .


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Exploration
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

flBeenTol([ID,CP,TYPE,SEV]) :- tolby([ID,CP,TYPE,SEV],ID2),
								safMon(ID2,CP,_,_,_,_,_),  
%								 safPat(ID2),
								 ID2 != nuSafMon,
								 explore(N,safMon) .

flBeenTol([ID,CP,TYPE,SEV]) :- tolby([ID,CP,TYPE,SEV],ID2),  
								 psc(ID2,CP,_,_,_,_,_),
								 ID2 != nuPSC,
								 explore(N,psc) .

flBeenTol([ID,CP,TYPE,SEV]) :- tolby([ID,CP,TYPE,SEV],ID2),  
								 hdr(ID2,_,_,_,_,_,_,_),
								 ID2 != nuHDR,
								 explore(N,hdr) .

flBeenTol([ID,CP,TYPE,SEV]) :- tolby([ID,CP,TYPE,SEV],ID2),  
								 tmr(ID2,CP1,_,_,_,_,_,_,_,_),
								 ID2 != nuTMR,
								 explore(N,tmr) .								 

flBeenTol([ID,CP,TYPE,SEV]) :- tolby([ID,CP,TYPE,SEV],ID2),  
								 nProg(ID2,CP,_,_,_,_,_),
								 ID2 != nuNProg,
								 explore(N,nProg) .

flBeenTol([ID,CP,TYPE,SEV]) :- tolby([ID,CP,TYPE,SEV],ID2),  
								 watchDog(ID2,CP,_,_),
								 ID2 != nuWD,
								 explore(N,watchDog) .
%%%%%%% Safety Monitor %%%%%%%
%basicOrNTOL([ID,CP,TYPE,SEV]) :- tol([ID,CP,TYPE,SEV]) . 
%basicOrNTOL([ID,CP,TYPE,SEV]) :- basic([ID,CP,TYPE,SEV]). 

% safMon for err
xsafMon(nuSafMon,CP,[allInputs],[allOutputs],nuSC,[numin],[numout]) 
v 
nxsafMon(nuSafMon,CP,[allInputs],[allOutputs],nuSC,[numin],[numout]) 
 :- cp(CP),
 	not sw(CP),
    fl([ID,CP,err,SEV]),
%   ntol([ID,CP,err,SEV]),
  not flBeenTol([ID,CP,err,SEV]),
    explore(N,safMon) .

% safMon for omission
xsafMon(nuSafMon,CP,[allInputs],[allOutputs],nuSC,[numin],[numout]) 
v 
nxsafMon(nuSafMon,CP,[allInputs],[allOutputs],nuSC,[numin],[numout]) 
 :- cp(CP),
    fl([ID,CP,omission,SEV]),
   not flBeenTol([ID,CP,omission,SEV]),
    explore(N,safMon) .
		
:- #count{CP : xsafMon(nuSafMon,CP,_,_,_,_,_)} > N, explore(N,safMon) .

%%%%%%% Safety Pattern: Protected Single Channel (psc) %%%%%%%
% PSC for err
xpsc(nuPSC,CP,inpsc,oupsc,nuSCpsc,numinpsc,numoutpsc) 
v 
nxpsc(nuPSC,CP,inpsc,oupsc,nuSCpsc,numinpsc,numoutpsc) 
 :- cp(CP),
 	sw(CP),
    fl([ID,CP,err,SEV]),
    not flBeenTol([ID,CP,err,SEV]),
    explore(N,psc) .

% PSC for omission
xpsc(nuPSC,CP,inpsc,oupsc,nuSCpsc,numinpsc,numoutpsc) 
v 
nxpsc(nuPSC,CP,inpsc,oupsc,nuSCpsc,numinpsc,numoutpsc) 
 :- cp(CP),
  	sw(CP),
    fl([ID,CP,omission,SEV]),
    not flBeenTol([ID,CP,omission,SEV]),
    explore(N,psc) .
		
:- #count{CP : xPSC(nuPSC,CP,_,_,_,_,_)} > N, explore(N,psc) .



%% out(CP,CH) :- cp(CP), {CH : ch(CH,CP,_)} .

%%%%%%% N-OUT-OF-2 Moon with fail safe (part 1) %%%%%%%
%% Reasoning is imcomplete as it assumes that 
%% CP2 is the direct incomming channel, while in general we could use previous channel in the information flow.
xhdr(nuHDR,CP1,CH1,CP2,nuchm1,nuchm2,nuvtcp,nucho,CPO)
v 
nxhdr(nuHDR,CP1,CH1,CP2,nuchm1,nuchm2,nuvtcp,nucho,CPO)
	:- fl([ID,CP,omission,SEV]),
	   not flBeenTol([ID,CP,omission,SEV]),
		 CP2 != CP,
		 cp(CP1),
		 cp(CP2),
		 ch(CHOUT,CP1,_),
		 ch(CHIN,_,CP2),
		 cp(CP),
		 ch(CH,CP,_),
		 if(IF,PATH),
		 before(CHOUT,CHIN,IF),
	%% % output of cp1 is before or equal than the output from the cp with hazard    
		 before(CHOUT,CH,IF),
	%% % output of cp with hazard is before of equal the input of cp2
		 before(CH,CHIN,IF),
		 ch(CH1,_,CPO),
		 % output of cp1 is before than ch1
		 before(CHIN,CH1,IF),
		 CP1 != CP, %% TODO: TO BE DISCUSSED
		 CP1 != CP2,
		 CP1 != CPO,
		 CP2 != CPO,  
		 explore(N,hdr) .

%%%%%%% N-OUT-OF-2 Moon with fail safe (part 2) %%%%%%%
%% Reasoning is imcomplete as it assumes that 
%% CP2 is the direct incomming channel, while in general we could use previous channel in the information flow.
xhdr(nuHDR,CP1,CH1,CP2,nuchm1,nuchm2,nuvtcp,nucho,CPO)
v 
nxhdr(nuHDR,CP1,CH1,CP2,nuchm1,nuchm2,nuvtcp,nucho,CPO)
	:- fl([ID,CP,omission,SEV]),
	     not flBeenTol([ID,CP,omission,SEV]),
		 cp(CP1),
		 cp(CP2),
		 ch(CHOUT,CP1,_),
		 ch(CHIN,_,CP2),
		 cp(CP),
		 ch(CH,CP,_),
		 if(IF,PATH),
		 before(CHOUT,CHIN,IF),     
	%% % output of cp1 is before or equal than the output from the cp with hazard    
		 before(CHOUT,CH,IF),
		 ch(CH1,_,CPO),
		 before(CHIN, CH1,IF),
 %    #member(CH1,PATH),
		 CP1 != CP, %% TODO: TO BE DISCUSSED
		 CP1 != CP2,
		 CP1 != CPO,
		 CP2 != CPO,  
		 explore(N,hdr) .

:- #count{CP1,CH1,CP2 : xhdr(nuHDR,CP1,CH1,CP2,_,_,_,_,_)} > N,
explore(N,hdr) . 

%:- #count{X : moon2FS(_,X,_,_,_,_,_,_,_)} > 1,
%explore(N,T) . 
%:- #count{X : moon2FS(_,_,_,X,_,_,_,_,_)} > 1,
%explore(N,T) . 


%%%%%%% N-OUT-OF-3 Moon with fail safe %%%%%%%
xtmr(nuTMR,CP1,CH1,nucp2,nucp3,nuchm1,nuchm2,nuchm3,nuvtcp,nucho,nucpo)
v 
nxtmr(nuTMR,CP1,CH1,nucp2,nucp3,nuchm1,nuchm2,nuchm3,nuvtcp,nucho,nucpo)
	:-  cp(CP1),
			not sw(CP1), %  only for hw components?
			fl([ID,CP1,err,SEV]),
		    not flBeenTol([ID,CP1,err,SEV]),
			ch(CH1,CP1, _),
			CH1 != nuchm1,
			CH1 != nuchm2,
			CH1 != nuchm3,   
			explore(N,tmr) .

:- #count{CP1,CHI : xtmr(nuTMR,CP1,CHI,_,_,_,_,_,_,_,_)} > N, explore(N,tmr) .


%%%%%%% N Programming %%%%%%%
%nProg(nuNProg, V1, chInp1, chOut1, chNOut1, v2, chInp2, chOut2, voterNPcp, chNPOut, output)
%v
%nnProg(nuNProg, V1, chInp1, chOut1, chNOut1, v2, chInp2, chOut2, voterNPcp, chNPOut, output)
%xnProg(ID,V1,[CHINP1],[CHOUT1],V2,[VOTERNPCP],[CHNPOUT],[OUTCP]) .
xnProg(nuNProg, V1, [chInp1], [chOut1], v2, [voterNPcp], [chNPOut], [output])
v
nxnProg(nuNProg, V1, [chInp1], [chOut1], v2, [voterNPcp], [chNPOut], [output])
		:- cp(V1),
		   sw(V1),
		   fl([ID,V1,err,SEV]),
		   not flBeenTol([ID,V1,err,SEV]),
%		   ch(CHINP1,_,V1),
%		   ch(CHOUT1,V1,_),
		   V1 != v2,
		   V1 != voterNPcp,
		   V1 != output,
		   explore(N,nProg) .  	

:- #count{V1 : xnProg(nuNProg,V1,_,_,_,_,_,_)} > N,
	 explore(N,nProg) .		  

%%%%%%% WatchDog %%%%%%%
xwatchDog(nuWD,CP,nuscwd,nulvwd)
v
nxwatchDog(nuWD,CP,nuscwd,nulvwd)
	:- cp(CP),
	   not sw(CP),
	   fl([ID,CP,loss,SEV]),
	   not flBeenTol([ID,CP,loss,SEV]),
%	   ch(_,CP,_),
	   explore(N,watchDog) .

%%%%%%% WatchDog %%%%%%%
xwatchDog(nuWD,CP,nuscwd,nulvwd)
v
nxwatchDog(nuWD,CP,nuscwd,nulvwd)
	:- cp(CP),
	   not sw(CP),
	   fl([ID,CP,late,SEV]),
	   not flBeenTol([ID,CP,late,SEV]),
%	   ch(_,CP,_),
	   explore(N,watchDog) .	   


:- #count{CP : xwatchDog(nuWD,CP,_,_)} > N, explore(N,watchDog) .       
