% run dlv paper-example.dlv

% === SAFETY COMPARISON  ===
higherEqualThan(d,d).
higherEqualThan(d,c).
higherEqualThan(d,b).
higherEqualThan(d,a).
higherEqualThan(c,c).
higherEqualThan(c,b).
higherEqualThan(c,a).
higherEqualThan(b,b).
higherEqualThan(b,a).
higherEqualThan(a,a).

min(ASIL1,ASIL2,ASIL2) :- higherEqualThan(ASIL1,ASIL2) .
min(ASIL1,ASIL2,ASIL1) :- higherEqualThan(ASIL2,ASIL1) .


higherEqualThan(all2fail,all2fail).
higherEqualThan(all2fail,all1fail).
higherEqualThan(all2fail,never).
higherEqualThan(all1fail,all1fail).
higherEqualThan(all1fail,never).



higherEqualThan(most2fail,most2fail).
higherEqualThan(most2fail,most1fail).
higherEqualThan(most2fail,never).
higherEqualThan(most1fail,most1fail).
higherEqualThan(most1fail,never).

higherEqualThan(never,never).


% === ASIL Table  ===
asil(IDHZ,d) :- hz(IDHZ,[_,s3,e4,c3]).
asil(IDHZ,c) :- hz(IDHZ,[_,s3,e4,c2]).
asil(IDHZ,c) :- hz(IDHZ,[_,s3,e3,c3]).
asil(IDHZ,b) :- hz(IDHZ,[_,s3,e4,c1]).
asil(IDHZ,b) :- hz(IDHZ,[_,s3,e3,c2]).
asil(IDHZ,b) :- hz(IDHZ,[_,s3,e2,c3]).
asil(IDHZ,a) :- hz(IDHZ,[_,s3,e3,c1]).
asil(IDHZ,a) :- hz(IDHZ,[_,s3,e2,c2]).
asil(IDHZ,a) :- hz(IDHZ,[_,s3,e1,c3]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s3,e2,c1]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s3,e1,c1]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s3,e1,c2]).

asil(IDHZ,c) :- hz(IDHZ,[_,s2,e4,c3]).
asil(IDHZ,b) :- hz(IDHZ,[_,s2,e4,c2]).
asil(IDHZ,a) :- hz(IDHZ,[_,s2,e4,c1]).
asil(IDHZ,b) :- hz(IDHZ,[_,s2,e3,c3]).
asil(IDHZ,a) :- hz(IDHZ,[_,s2,e3,c2]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s2,e3,c1]).
asil(IDHZ,a) :- hz(IDHZ,[_,s2,e2,c3]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s2,e2,c2]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s2,e2,c1]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s2,e1,c3]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s2,e1,c2]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s2,e1,c1]).

asil(IDHZ,b) :- hz(IDHZ,[_,s1,e4,c3]).
asil(IDHZ,a) :- hz(IDHZ,[_,s1,e4,c2]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s1,e4,c1]).
asil(IDHZ,a) :- hz(IDHZ,[_,s1,e3,c3]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s1,e3,c2]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s1,e3,c1]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s1,e2,c3]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s1,e2,c2]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s1,e2,c1]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s1,e1,c3]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s1,e1,c2]).
asil(IDHZ,qm) :- hz(IDHZ,[_,s1,e1,c1]).

% ======= SAFETY GOAL

%% sg(IDG,[IDHZ,FOP,FSILENT,FSAFE]).

satisfiedSG(IDSG) :- 
   sg(IDSG,[IDHZ | [PATFOP1,PATFSILENT1,PATFSAFE1]]),
   getHazardASIL(IDHZ,ASIL1),
   ctl(IDHZ,[ASIL2,PATFOP2,PATFSILENT2,PATFSAFE2]),
   higherEqualThan(ASIL2,ASIL1), 
   higherEqualThan(PATFOP2,PATFOP1), 
   higherEqualThan(PATFSILENT2,PATFSILENT1), 
   higherEqualThan(PATFSAFE2,PATFSAFE1) .
%                     attrsHigherOrEqual(ATTRSINTENT2,ATTRSINTENT1).

% === Safety Analysis ===

%% Hazard is controlled
%% hz(id,[sev,exp,ctl])
%% mcs(id,[idf1,idf2,...,.idfn])
%% fl(id,[type])
%% ft(id,[cp])
%% safetyPattern(id,[pat,LTARGET,LREDUNDANCY,LCHECKER,LINPUTS,LINTERNAL,LOUTPUTS])

ctl(IDHZ,ATTRSINTENT) :- hz(IDHZ,ATTRSHZ),
                         lmcs2hz(LMCS,IDHZ),
                         getMinIntent(LMCS,ATTRSINTENT).


getMinIntent([IDMCS], ATTRSINTENT) :- avoidedMCS(IDMCS,ATTRSINTENT) .
getMinIntent([MCS1 | LMCS], [PATASIL,PATFOP,PATFSILENT,PATFSAFE]) 
          :- avoidedMCS(MCS1,[PATASIL1,PATFOP1,PATFSILENT1,PATFSAFE1]),
             getMinIntent(LMCS, [PATASIL2,PATFOP2,PATFSILENT2,PATFSAFE2]),
             min(PATASIL1,PATASIL2,PATASIL),
             min(PATFOP1,PATFOP2,PATFOP),
             min(PATFSILENT1,PATFSILENT2,PATFSILENT),
             min(PATFSAFE1,PATFSAFE2,PATFSAFE),
             lmcs2hz(LMCS2,IDHZ),
             #subList([MCS1 | LMCS],LMCS2),
             not #member(MCS1,LMCS) .    


avoidedMCS(IDMCS,ATTRSINTENT) :- mcs(IDMCS,FLISTFAIL),
                     			       fl(IDFL,ATTRSFL),
                                 #member(IDFL,FLISTFAIL),
                                 avoided(IDFL,[PAT | ATTRSINTENT]).

tol(IDFT) :- not ntol(IDFT),
             ft(IDFT,ATTRSFT).

ntol(IDFT) :- ft(IDFT, ATTRSFT),
              ft2fl(IDFT,IDFL),
              navoided(IDFL).

% ===== AF3 Specific ====

ch(CH,CP1,CP2) :- newCh(CH,CP1,CP2).


% ======= Failure avoidance with patterns
avoided(IDFL,[IDPAT | ATTRSINTENT]) :- fl(IDFL,ATTRSFL),
							                  getFailureType(IDFL,TYPE),
                        			      ft2fl(IDFT,IDFL),
                        			      %Faults may be classified as systematic/random. This would have implications to the safety pattern, e.g., Homogeneous/heterogeneous.
                        				 	ft(IDFT,ATTRSFT), 
                        				 	getFaultCP(IDFT,TARGET),			                 
                        			      safetyPattern(IDPAT,ATTRSPAT),
                        					getSafPatName(IDPAT,PAT),
                        					getSafPatTarget(IDPAT,TARGET),
                        					safetyIntent(PAT,[PATTYPE | ATTRSINTENT]). 						 

avoidedby(IDFL,TARGET,[IDPAT | ATTRSINTENT]) :- fl(IDFL,ATTRSFL),
                                                getFailureType(IDFL,TYPE),
                                                ft2fl(IDFT,IDFL),
                                                ft(IDFT,ATTRSFT), 
                                                getFaultCP(IDFT,TARGET),                      
                                                safetyPattern(IDPAT,ATTRSPAT),
                                                getSafPatName(IDPAT,PAT),
                                                getSafPatTarget(IDPAT,TARGET),
                                                safetyIntent(PAT,[PATTYPE | ATTRSINTENT]). 

% ======== Safety patterns ========


% ****** Self-checking pair, simplex fault down ***********
%always after 1st failure -> alaf1fl
%after all 1st failures -> afall1fl
%after most 1st failures -> afmo1fl
%after most 2nd failures -> afmo2fl
%never after 1st failures -> neaf1fl
%after some 1st failures or 2nd failures -> afsm1fl2fl
%never -> never

assumption(selfCheckingPairSimplexFaultDown,are_duplicated,[TARGET]) :- 
   safetyPattern(IDPAT,[selfCheckingPairSimplexFaultDown,[TARGET,REDUNDANCY,_],_,_,_]).
assumption(selfCheckingPairSimplexFaultDown,are_independent,[TARGET,REDUNDANCY]) :- 
   safetyPattern(IDPAT,[selfCheckingPairSimplexFaultDown,[TARGET,REDUNDANCY,_],_,_,_]).
%assumption(selfCheckingPairSimplexFaultDown,"implementing_BIT",[TARGET,REDUNDANCY,CHECKER]) :- 
%   safetyPattern(IDPAT,[selfCheckingPairSimplexFaultDown,[TARGET,REDUNDANCY,CHECKER],_,_,_]).

safetyIntent(selfCheckingPairSimplexFaultDown,[[loss,err],d,all1fail,never,all2fail]) .

safPat(IDPAT,[selfCheckingPairSimplexFaultDown,TARGET]) :- safetyPattern(IDPAT,[selfCheckingPairSimplexFaultDown,[TARGET,_,_],_,_,_]).

%% safetyPattern(IDPAT,[selfCheckingPairSimplexFaultDown,[TARGET,REDUNDANCY,CHECKER],INPUTS,INTERNAL,OUTPUTS]) :- 
%% 		xsafetyPattern(IDPAT,[selfCheckingPairSimplexFaultDown,[TARGET,REDUNDANCY,CHECKER],INPUTS,INTERNAL,OUTPUTS]), 
%% 		explore(N,selfCheckingPairSimplexFaultDown).


% ****** Safety Pattern: Dual self-checking pair pattern with fail safe (dualSelfCheckingPairFS)  ***********

%always after 1st failure -> alaf1fl
%after most 1st failures -> afmo1fl
%after most 2nd failures -> afmo2fl
%never after 1st failures -> neaf1fl
%after some 1st failures or 2nd failures -> afsm1fl2fl
%never -> ne
assumption(dualSelfCheckingPairFS,are_independent,[TARGET,REDUNDANCY]) :- 
  safetyPattern(IDPAT,[dualSelfCheckingPairFS,[TARGET,REDUNDANCY,_],_,_,_]),
  exploreSafPat(dualSelfCheckingPairFS).
safetyIntent(dualSelfCheckingPairFS,[[err],d,all1fail,never,all2fail]) .

safPat(IDPAT,[dualSelfCheckingPairFS,TARGET]) :- safetyPattern(IDPAT,[dualSelfCheckingPairFS,[TARGET,REDUNDANCY,_],_,_,_]).

safetyPattern(IDPAT,[dualSelfCheckingPairFS,[TARGET,REDUNDANCY,CHECKER],INP,INT,OUT]) :- xsafetyPattern(IDPAT,[dualSelfCheckingPairFS,[TARGET,REDUNDANCY,CHECKER],INP,INT,OUT]).


% ****** Safety Pattern: SIMPLEX ARCHITECTURE (SA)  ***********

%always after 1st failure -> alaf1fl
%after most 1st failures -> afmo1fl
%after most 2nd failures -> afmo2fl
%never after 1st failures -> neaf1fl
%after some 1st failures or 2nd failures -> afsm1fl2fl
%never -> ne
assumption(simplexArchitectureFS,are_decoupled,[TARGET,REDUNDANCY]) :- 
  safetyPattern(IDPAT,[simplexArchitectureFS,[TARGET,REDUNDANCY,_],_,_,_]).
safetyIntent(simplexArchitectureFS,[[err],d,most1fail,never,most2fail]) .

safPat(IDPAT,[simplexArchitectureFS,TARGET]) :- safetyPattern(IDPAT,[simplexArchitectureFS,[TARGET,REDUNDANCY,_],_,_,_]).

safetyPattern(IDPAT,[simplexArchitectureFS,[TARGET,REDUNDANCY,CHECKER],INP,INT,OUT]) :- xsafetyPattern(IDPAT,[simplexArchitectureFS,[TARGET,REDUNDANCY,CHECKER],INP,INT,OUT]).


% ****** Safety Pattern: Homogeneous Duplex Pattern (SA)  ***********

%always after 1st failure -> alaf1fl
%after most 1st failures -> afmo1fl
%after most 2nd failures -> afmo2fl
%never after 1st failures -> neaf1fl
%after some 1st failures or 2nd failures -> afsm1fl2fl
%never -> ne
assumption(homogeneousDuplex,are_duplicated,[TARGET,REDUNDANCY]) :- 
  safetyPattern(IDPAT,[heterogeneousDuplex,[TARGET,REDUNDANCY,_],_,_,_]).

safetyIntent(homogeneousDuplex,[[err],d,most1fail,most2fail,never]) .

safPat(IDPAT,[homogeneousDuplex,TARGET]) :- safetyPattern(IDPAT,[homogeneousDuplex,[TARGET,REDUNDANCY,_],_,_,_]).

safetyPattern(IDPAT,[homogeneousDuplex,[TARGET,REDUNDANCY,CHECKER],INP,INT,OUT]) :- xsafetyPattern(IDPAT,[homogeneousDuplex,[TARGET,REDUNDANCY,CHECKER],INP,INT,OUT]).

% ****** Safety Pattern: Heterogeneous Duplex Pattern (SA)  ***********

%always after 1st failure -> alaf1fl
%after most 1st failures -> afmo1fl
%after most 2nd failures -> afmo2fl
%never after 1st failures -> neaf1fl
%after some 1st failures or 2nd failures -> afsm1fl2fl
%never -> ne
assumption(heterogeneousDuplex,are_independent,[TARGET,REDUNDANCY]) :- 
  safetyPattern(IDPAT,[heterogeneousDuplex,[TARGET,REDUNDANCY,_],_,_,_]).

safetyIntent(heterogeneousDuplex,[[err],d,most1fail,most2fail,never]) .

safPat(IDPAT,[heterogeneousDuplex,TARGET]) :- safetyPattern(IDPAT,[heterogeneousDuplex,[TARGET,REDUNDANCY,_],_,_,_]).

safetyPattern(IDPAT,[heterogeneousDuplex,[TARGET,REDUNDANCY,CHECKER],INP,INT,OUT]) :- xsafetyPattern(IDPAT,[heterogeneousDuplex,[TARGET,REDUNDANCY,CHECKER],INP,INT,OUT]).

% ****** Safety Pattern: Triple Modular Redundancy (TMR)  ***********


assumption(tripleModularRedundancy,are_decoupled,[TARGET,REDUNDANCY]) :- 
	xsafetyPattern(IDPAT,[tripleModularRedundancy,[TARGET,REDUNDANCY,_],_,_,_]),
    exploreSafPat(tripleModularRedundancy).

%always after 1st failure -> alaf1fl
%always after 2nd failure -> alaf2fl
%after most 1st failures -> afmo1fl
%after most 2nd failures -> afmo2fl
%never after 1st failures -> neaf1fl
%never -> ne
safetyIntent(tripleModularRedundancy,[[err],d,all1fail,never,never]) .
%safetyIntentOperational(tripleModularRedundancy,alaf1fl,alaf1fl,alaf2f).

safPat(IDPAT,[tripleModularRedundancy,TARGET]) :- xsafetyPattern(IDPAT,[tripleModularRedundancy,[TARGET,REDUNDANCY,CHECKER],INPUTS,INTERNAL,OUTPUTS]).

%safetyPattern(IDPAT,[tripleModularRedundancy,[TARGET,REDUNDANCY,CHECKER],INPUTS,INTERNAL,OUTPUTS]) :- 
%		xsafetyPattern(IDPAT,[tripleModularRedundancy,[TARGET,REDUNDANCY,CHECKER],INPUTS,INTERNAL,OUTPUTS]),  
%		explore(N,tripleModularRedundancy).

% ****** Safety Pattern: Watchdog  ***********
assumption(watchDog,are_verified,[REDUNDANCY]) :- xsafetyPattern(IDPAT,[watchDog,[TARGET,REDUNDANCY,_],_,_,_]).
safetyIntent(watchDog,[[loss],b,never,never,all1fail]) .
safPat(IDPAT,[watchDog,TARGET]) :- xsafetyPattern(IDPAT,[watchDog,[TARGET,REDUNDANCY,_],_,_,_]).
%% safetyPattern(IDPAT,[watchDog,[TARGET,REDUNDANCY,CHECKER],INPUTS,INTERNAL,OUTPUTS]) :- xsafetyPattern(IDPAT,[watchDog,[TARGET,REDUNDANCY,CHECKER],INPUTS,INTERNAL,OUTPUTS]).

% ****** Safety Pattern: Monitor Actuator  ***********
assumption(monitorActuator,are_verified,[REDUNDANCY]) :- safetyPattern(IDPAT,[monitorActuator,[TARGET,REDUNDANCY,_],_,_,_]).
safetyIntent(monitorActuator,[[err],b,never,most1fail,never]) .
safPat(IDPAT,[monitorActuator,TARGET]) :- safetyPattern(IDPAT,[monitorActuator,[TARGET,REDUNDANCY,_],_,_,_]).

safetyPattern(IDPAT,[monitorActuator,[TARGET,REDUNDANCY,CHECKER],INPUTS,INTERNAL,OUTPUTS]) :- xsafetyPattern(IDPAT,[monitorActuator,[TARGET,REDUNDANCY,CHECKER],INPUTS,INTERNAL,OUTPUTS]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Exploration
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 
avoidedMCS(IDMCS,ATTRSINTENT) :- mcs(IDMCS,FLISTFAIL),
                     			   fl(IDFL,ATTRSFL),
                                 #member(IDFL,FLISTFAIL),
                                 nuAvoided(IDFL,[PAT | ATTRSINTENT]).

avoided(IDFL,ATTRSINTENT) :- nuAvoided(IDFL,[IDPAT | ATTRSINTENT]) .

nuAvoided(IDFL,[IDPAT | ATTRSINTENT]) :- xsafetyPattern(IDPAT,[PAT,[TARGET | OTHERCPS],INPUTS,INTERNAL,OUTPUTS]),
                                         safetyIntent(PAT,[TYPE | ATTRSINTENT]),
                                         cp(TARGET), 
                                 	     fl(IDFL,ATTRSFL),
                                         ft2fl(IDFT,IDFL),
                                   	     getFaultCP(IDFT,TARGET),
                                         getFailureType(IDFL,FTYPE),
                                         #member(FTYPE,TYPE),
                                         getSafIntentASIL(PAT,PAT_ASIL),
                                         mcs(IDMCS,FAILURES),
                                         #member(IDFL,FAILURES),       
                                         lmcs2hz(IDMCS,HZ),
                                         asil(HZ,HZ_ASIL),
                                         higherEqualThan(PAT_ASIL,HZ_ASIL).


xsafetyPattern([nuIDSAFPAT,PAT,CTR],[PAT,[TARGET,[nuREDUNDANCY,CTR],[nuCHECKER,CTR]],[nuINPUTS,CTR],[nuINTERNAL,CTR],[nuOUTPUTS,CTR]])
v
nxsafetyPattern([nuIDSAFPAT,PAT,CTR],[PAT,[TARGET,[nuREDUNDANCY,CTR],[nuCHECKER,CTR]],[nuINPUTS,CTR],[nuINTERNAL,CTR],[nuOUTPUTS,CTR]])
  :- fl(IDFL,ATTRSFL),
	  getFailureType(IDFL,TYPE),
	  ft(IDFT,ATTRSFT),
	  getFaultCP(IDFT,TARGET),			                 
     ft2fl(IDFT,IDFL),
	  counterSafPat(CTR),
     exploreSafPat(PAT).

%:- #count{CTR : xsafetyPattern([nuIDPAT,CTR],_)} > N, explore(N,PAT) .

#const numSafPatMin = 1.
#const numSafPatMax = 1. % TODO: Assign the number of failures to numFailureMax 
counterSafPat(numSafPatMin..numSafPatMax).
counting(X) :- #count{IDFL : fl(IDFL,ATTRSFL)} = X. 


% Ensure that an already used instance of a pattern is not used again
:- xsafetyPattern([nuIDSAFPAT,PAT,CTR],[PAT,[TARGET1,_,_],_,_,_]), 
   xsafetyPattern([nuIDSAFPAT,PAT,CTR],[PAT,[TARGET2,_,_],_,_,_]), 
   TARGET1 != TARGET2 .


% Ensure that only 1 instance of the same pattern is applied to the same component CP1
:- xsafetyPattern([nuIDSAFPAT,PAT,CTR1],[PAT,[TARGET,_,_],_,_,_]), 
   xsafetyPattern([nuIDSAFPAT,PAT,CTR2],[PAT,[TARGET,_,_],_,_,_]), 
   CTR1 != CTR2 .


% Ensure that only 1 instance of the same pattern with the same type is recommended for a component CP1 
:- xsafetyPattern(_,[PAT1,[TARGET,_,_],_,_,_]), 
   xsafetyPattern(_,[PAT2,[TARGET,_,_],_,_,_]), 
   PAT1 != PAT2 .


%xsafetyPattern(simplexArchitecture,[nuIDPAT,2],[task_AdaptiveCruiseControl_75490,[nuRedundancy1,2],[nuRedundancy2,2]],[nuChecker,2],[[nuAux1,2],[nuAux2,2]]), 
%xsafetyPattern(simplexArchitecture,[nuIDPAT,3],[task_AdaptiveCruiseControl_75490,[nuRedundancy1,3],[nuRedundancy2,3]],[nuChecker,3],[[nuAux1,3],[nuAux2,3]]), 
%xsafetyPattern(simplexArchitecture,[nuIDPAT,1],[task_LaneKeeping_75556,[nuRedundancy1,1],[nuRedundancy2,1]],[nuChecker,1],[[nuAux1,1],[nuAux2,1]])
   